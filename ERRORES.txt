-Si es un problema que te pide calcular la # mínima de swaps adyacentes, pensá cómo reducirlo a contar inversiones! Ej: shoes IOI 2019, https://codeforces.com/contest/1430/problem/E
-Si calculas la toposort, tenés que darla vuelta!
-Antes de ver el greedy, fijate si una dp anda! (Muchas veces creí que era greedy, pero una simple dp andaba...) Ej: https://codeforces.com/contest/1398/problem/D
-Si no sale, SIEMPRE fijarse si se puede hacer con búsqueda binaria sobre la respuesta!
-En problemas de árboles, hacer technique bash! (O sale con dp, con rerooting trick, con lca, binary lifting, euler tour technique, centroid, etc) pero siempre que no salga de una,
ver si sale con alguna de esas.
-Acordate que se puede calcular la intersección de intervalos rápido!
-En problemas de intervalos, SIEMPRE pensarlos con sweep line. Es decir, los ordeno, y me mantengo cosas como, "El que cierra más tarde que vi hasta ahora", etc. Ver http://www.usaco.org/index.php?page=viewproblem2&cpid=784
-Siempre probá lo que se te venga a la cabeza, pero tampoco te cierres con una sola idea.
-BUSCAR INVARIANTES.
-SIEMPRE pensar todos los problemas (sin leerlo y al toque decir, uh, este es imposible).
-En ciertos problemas de grafos, ver si existe alguna relación entre la # de componentes conexas o la cantidad de nodos en c componente con la respuesta!
-A veces, pensasr en el grafo subyacente. Es decir, si hay pares, probá conectarlos en un grafo XD. Esto suena rancio,
pero hay veces que te dan pares de números y medio que no entendés nada, pero te armás el grado y sale. Ej: https://codeforces.com/problemset/problem/1209/D
-A veces las cotas hablan por sí mismas. Si tenés n<=20, eso grita dp bitmask.
-BUSCÁ CASOS BORDES
-La posta de rerooting trick: si hago una dp con el nodo raíz, y es fácil pasarle esta dp a un hijo mío. Ej:https://codeforces.com/contest/1324/problem/F, https://codeforces.com/contest/1187/problem/E
-Siempre que pienses que es una dp del estilo "exchange aruments", PROBÁ SORTEAR DE TODAS LAS MANERAS! Muchas veces esto es trivial, como en http://juez.oia.unsam.edu.ar/#/task/negocios/statement, pero otras veces no tanto, como en https://omegaup.com/arena/problem/ciic2020-codefoxes/#problems.
-Si da RTE, fijate bien el tamaño de vector y no estar accediendo a posiciones más grandes. Ej: https://codeforces.com/contest/431/problem/C
-En problemas de DP, pensar bien cuál es el estado. Tené en cuenta las restricciones y el profit.
Tip de este video pro: https://www.youtube.com/watch?v=48NtGlHJ4gE&ab_channel=luisenriquevargasazcona
Los estados son el conjunto de todas las restricciones previamente impuestas o el conjunto de la información relevante luego de tomar algunas decisiones.
-Multiplicar por 1LL para evitar overflow.
-PRESTÁ ATENCIÓN A LAS COTAS.
-En problemas greedy que ordenes por algún criterio, pensá bien qué criterio es el que más te conviene para ordenar! Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=787
Vos sorteabas por compro*precio, pero era solo por precio.
-En problemas tipo constructivos, pensar si no hay una forma sistemática de resolverlo! Ej: https://codeforces.com/contest/1421/problem/C
-Si tu solución/el problema es casoso, pensar bien cada caso por separado y cómo podría llegar a darse ese caso. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=763
-Si necesitas calcular APSP (all pairs shortest path) pero no se puede usar flory marsall, usá dijsktra! Ej: https://codeforces.com/contest/1433/problem/G
Además, fijate que si elegis que la arista a la que le ponés 0 es u-v, el camino de a-b es el mejor entre el camino de a-b, a-u+v-b, a-v+u-b.
-En problemas en los que haya que usar divisores, pensarlo al revés. Es decir, es más eficiente calcular los múltiplos de un número que sus divisores. Ej: https://oj.uz/problem/view/COCI17_savrsen
-Probá ver os números en otra base. Ej:https://oj.uz/problem/view/COCI16_tavan
Si vemos a X en base K, vemos que el i-esimo digito corresponde al i-esimo caracter que la minimiza.
-En problemas con pinta greedy, ver que cosa NUNCA conviene hacer. Eso va a reducir casos, y tal vez es la solución. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=810
-En problemas en los que haya operaciones tipo "togglea una submatriz, etc" fijate si hay elementos que solo pueden cambiar de una forma. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=689
-En problemas de teoría de números, siempre pensar en la factorización en primos de los número o el máximo cmún divisor. Ej: https://codeforces.com/contest/1062/problem/B https://codeforces.com/problemset/problem/1349/A https://cses.fi/problemset/task/1082 https://codeforces.com/problemset/problem/1514/C
-Acordate que a xor a = 0! Ej: https://codeforces.com/contest/1438/problem/D
-En problemas de tableros, siempre considerá pintarlo como tablero de ajedrez!! Ej: https://codeforces.com/contest/1438/problem/C
-Siempre pensá en fibonacci! Ej: https://codeforces.com/contest/1452/problem/D
-En problemas de operaciones, fijarte si siempre hay un valor que no te conviene cambiar. Ej: https://codeforces.com/problemset/problem/1353/F
Podés ver que siempre hay una casilla del camino optimo que no vas a querer cambiar.
-Si tenes queries de caminos pero el source no cambia CON SOLO 1 DIJKSTRA/LO Q SEA es suficiente.
-Si tenes n aristas y n nodos, el grafo es un ciclo del que cuelgan árboles. Ej: https://codeforces.com/contest/1454/problem/E
-Si queres hacer un chequeo del estilo a <= b/2 escribilo como 2*a <= b.
-Si tenés alguna cuenta/fórmula reescribila hasta que salga algo bueno. Ej: https://codeforces.com/problemset/problem/862/E
-Fijate que ventaja te podría dar procesar los objetos en cierto orden. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=813
-Si no se te ocurre nada, pensá en un dfs que pase por todos los estados. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=811
-A veces conviene pensar a los problemas de intervalos como bracket sequences (())()((()))()(). Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=743
-Chequeá que estés construyendo bien la suma de prefijos. Ej: https://codeforces.com/contest/1117/problem/C
Vos hacias if(...) S[i] = S[i-1]+k
Cuando deberia ser S[i] = S[i-1] if(...) S[i] += k
-Si tenés swaps/reverses, pensá en la paridad de la permutación, es decir, la paridad del número de inversiones. Ej: https://codeforces.com/problemset/problem/1256/F, https://omaforos.com.ar/viewtopic.php?f=5&t=1787
-Si se cuelga localmente y hay un dfs, probá hacerlo iterativo. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=596
-Si tenés operaciones en un prefijo, considerá empezar desde atrás, para una operación no te arruine las anteriores. Ej: https://codeforces.com/contest/1381/problem/A2
-Probar pintar como en ajedrez, partiendo en subtableros de 2x2, etc. Ej: https://codeforces.com/problemset/problem/763/B
-Probar primero comenzar con algo grande e ir achicandolo y viceversa. Ej: https://codeforces.com/contest/761/problem/E
-Para mapear celdas a numeros es M*i+j, NO N*i+j!! Ej: https://csacademy.com/contest/archive/task/mountain-time/statement/
-En la busqueda binaria siempre fijate que el high y low esten bien! Por las dudas, ponele un numero muy grande. Ej: perdiste como 30 mins con este problema https://oj.uz/problem/view/IOI09_mecho por poner high = 2n+5 en vez de n*n+5.
-Si tenes que maximizar/minimizar sum(ai)/sum(bi) siempre pensa en usar busqueda binaria. Ej: http://www.usaco.org/index.php?page=viewproblem2&cpid=839, https://www.hackerrank.com/contests/w31/challenges/spanning-tree-fraction/problem
-En problemas que involucren al gcd/lcm si nos dan un par (a, b) escribirlo como (Ag, Bg) con g = gcd(a, b) y gcd(A, B) = 1. Esto nos da muchas propiedades, ya que como A y B son coprimos, sin un primo divide a AB tiene que dividir a exactamente uno de A o B. Ej: https://codeforces.com/contest/1499/problem/D
-Truco piola con segtree para majority element. Ej: https://codeforces.com/problemset/problem/1514/D, https://www.spoj.com/problems/PATULJCI/
-En problemas que te piden minimzar algo, a veces es mejor pensar como podes maximizar otra cosa para minimzar ese algo. Ej: https://oj.uz/problem/view/LMIO19_triusis
En lugar de pensarlo como minimizar los que cambias, tenes que pensarlo como maximizar los que no cambias.
-En problemas de mediana, pensa que si la mediana es x y reemplazas los elementos menores a x con -1 y los mayores con 1. En un segmento, la mediana es al menos x si la suma de este segmento es positiva. Ej: https://codeforces.com/problemset/problem/1486/D
